import React, {useEffect} from 'react';
import ReactDOM from 'react-dom';
import Noise from './perlin';
import './index.css';

ReactDOM.render(
  <App />,
  document.getElementById('root')
);

function App() {
  useEffect(() => {
    const canvas = document.querySelector('canvas');
    canvas.width = 600;
    canvas.height = 200;
    const ctx = canvas.getContext('2d');
 
    const image = ctx.createImageData(canvas.width, canvas.height);
    const data = image.data;

    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData
    // `createImageData` returns a rectangular, 2D `ImageData` object whose properties are 
    // width, height, and data. The `data` prop is an array containing the rgba color data for every pixel 
    // in the image. This makes `ImageData` objects useful for programmatically creating 2D images, just
    // like we'll be doing with these noise functions.

    const start = Date.now();

    Noise.seed(Math.random());
    
    for (let x = 0; x < canvas.width; x++) {
      for (let y = 0; y < canvas.height; y++) {
        // In the tests I ran, the `value` returned by perlin2 was a "random" float that was always between 
        // 0.00 and 0.19, usually falling under 0.10. However, I suspect that the actual range of 
        // values generated by perlin2 is between 0.00 and 1.00, and my results were limited by the section
        // I was testing. 
        let value = Math.abs(Noise.perlin2(x / 100, y / 100));
        value *= 256; // scale 'value' to RGB 

        const cell = (x + y * canvas.width) * 4;
        // Red, Green, and Blue intially all get the same value. This results in varying shades of grey 
        // painted on to the canvas
        data[cell] = data[cell + 1] = data[cell + 2] = value;
        // Then we choose 1 color, Red in this case, receiving a multiplier. This results in bands of red
        // being painted over the greys.
        data[cell] += Math.max(0, (25 - value) * 8);
        // Set opacity to 1 for every pixel.
        data[cell + 3] = 255; // alpha.
      }
    }
    
    const end = Date.now();
    ctx.putImageData(image, 0, 0);    
    ctx.font = '16px sans-serif'
    ctx.textAlign = 'center';
    ctx.fillText('Rendered in ' + (end - start) + ' ms', canvas.width / 2, canvas.height - 20);
  }, []);

  return (
    <div className="App">
      <div className='centerbox'><canvas></canvas></div>
    </div>
  );
}